<#
#Comments generated by GitHub CoPilot

.SYNOPSIS
    Builds Azure resources for Managed User Management.

.DESCRIPTION
    This script builds various Azure resources required for Managed User Management. It creates a resource group, storage account, storage table, key vault, and function apps.

.PARAMETER objectRootName
    The root name for the Azure resources. This will be used to generate unique names for each resource.

.PARAMETER DomainName
    The domain name for the Managed User Management.

.PARAMETER LicenseGroupName
    The name of the Azure AD group that represents the license group.

.PARAMETER GroupTag
    The tag to be assigned to the device.

.PARAMETER UPNPrefix
    The prefix for the user principal names (UPNs) of the managed users.

.EXAMPLE
    .\AdminScripts\Build-AzureResources.ps1 -objectRootName "ManagedUserDemo1" -DomainName "asquaredozenlab.com" -LicenseGroupName "License" -GroupTag "Kiosk" -UPNPrefix "KSK"

.NOTES
    Author: Adam Gross - @AdamGrossTX
    GitHub: https://github.com/AdamGrossTX/ManagedUserManagement

#>

Param(
    [string]$objectRootName,
    [string]$DomainName,
    [string]$LicenseGroupName,
    [string]$GroupTag,
    [string]$UPNPrefix
)

$RequiredModules = @(
    "AzTable",
    "Az.Functions",
    "Az.KeyVault",
    "Az.Storage"
)

foreach ($Module in $RequiredModules) {
    if (Get-Module -ListAvailable -Name $Module) {
        Import-Module $Module
    }
    else {
        Write-Host "Az Module is not installed. Installing now" -NoNewline -ForegroundColor Cyan
        Install-Module Az -Force -Scope AllUsers
        Write-Host "Done" -ForegroundColor Green
    }
}

function Set-ManagedIDPermissions {
    [cmdletbinding()]
    param (
        $managedId,
        $graphScope
    )
    try {
        Write-Host "Setting MSI Permission: $($graphScope)" -NoNewline -ForegroundColor Cyan
        $token = (Get-AzAccessToken -ResourceUrl "https://graph.microsoft.com/").Token
        $header = @{Authorization = "Bearer $token" }

        $GraphAppId = "00000003-0000-0000-c000-000000000000"
        $GraphServicePrincipal = Get-AzADServicePrincipal -ApplicationId $GraphAppId
        $managedidentity = Get-AzADServicePrincipal -ObjectId $managedId

        foreach ($Permission in $graphscope) {
            $AppRole = $GraphServicePrincipal.AppRole | Where-Object { $_.Value -eq $Permission -and $_.AllowedMemberType -contains "Application" }

            $URI = "https://graph.microsoft.com/v1.0/servicePrincipals/$($managedidentity.Id)/appRoleAssignedTo"
            $Body = @{
                principalId = $managedidentity.Id
                resourceId  = $GraphServicePrincipal.Id
                appRoleId   = $AppRole.Id
            } | ConvertTo-Json

            $Response = Invoke-RestMethod -Method POST -Headers $Header -Body $Body -Uri $URI -ContentType "Application/Json" -ErrorAction Continue
        }
        Write-Host " - Done" -ForegroundColor Green
    }
    catch {
        if (($_.ErrorDetails.message | convertfrom-json).error.message -eq 'Permission being assigned already exists on the object') {
            Write-Host "$(($_.ErrorDetails.message | convertfrom-json).error.message)" -ForegroundColor Red
            throw ($_.ErrorDetails.message | convertfrom-json).error.message
        }
        else {
            throw $_
        }
    }
}

#region Main
Connect-AZAccount | Out-Null
Update-AzConfig -Scope Process -DisplayBreakingChangeWarning $false | Out-Null

$LicenseGroup = Get-AzADGroup -SearchString $LicenseGroupName

$Objects = @{
    ResourceGroup       = "rg$($objectRootName)"
    KeyVault            = "kv$($objectRootName)"
    StorageAccount      = "sa$($objectRootName.ToLower())"
    StorageTable        = "tbl$($objectRootName)"
    AdminFunctionApp    = "fa$($objectRootName)Admin"
    ClientFunctionApp   = "fa$($objectRootName)Client"
    Location            = "South Central US"
}

$AppSettings = @{
    DomainName         = $DomainName
    GroupTag           = $GroupTag
    LicenseGroupId     = $LicenseGroup.Id
    StorageAccountName = $Objects.StorageAccount
    TableName          = $Objects.StorageTable
    UPNPrefix          = $UPNPrefix
    VaultName          = $Objects.KeyVault
}

Write-Host "Creating the following resources" -ForegroundColor Cyan
$Objects.Keys | ForEach-Object {Write-Host "$($_) : $($Objects[$_])"}

Write-Host "Creating ResourceGroup" -NoNewline -ForegroundColor Cyan
$ResourceGroup = New-AzResourceGroup -Name $Objects.ResourceGroup -Location $Objects.Location
Write-Host " - Done" -ForegroundColor Green

Write-Host "Creating Storage Account" -NoNewline -ForegroundColor Cyan
$StorageAccount = New-AzStorageAccount -ResourceGroupName $ResourceGroup.ResourceGroupName -Name $Objects.StorageAccount -Location $Objects.Location -SkuName Standard_LRS -Kind StorageV2
Write-Host " - Done" -ForegroundColor Green

Write-Host "Creating Storage Table" -NoNewline -ForegroundColor Cyan
$StorageTable = New-AzStorageTable -Name $Objects.StorageTable -Context (New-AzStorageContext -StorageAccountName $StorageAccount.StorageAccountName -StorageAccountKey (Get-AzStorageAccountKey -ResourceGroupName $ResourceGroup.ResourceGroupName -Name $StorageAccount.StorageAccountName).Value[0])
Write-Host " - Done" -ForegroundColor Green

Write-Host "Creating Key Vault" -NoNewline -ForegroundColor Cyan
$KeyVault = New-AzKeyVault -ResourceGroupName $ResourceGroup.ResourceGroupName -VaultName $Objects.KeyVault -Location $Objects.Location -PublicNetworkAccess Enabled -SoftDeleteRetentionInDays 7 -EnableRbacAuthorization
Write-Host " - Done" -ForegroundColor Green

Write-Host "Creating Admin Function App" -NoNewline -ForegroundColor Cyan
$AzureFunctionAdmin = New-AzFunctionApp -ResourceGroupName $ResourceGroup.ResourceGroupName -Name $Objects.AdminFunctionApp -Location $Objects.Location -StorageAccountName $StorageAccount.StorageAccountName -Runtime PowerShell -FunctionsVersion 4 -IdentityType SystemAssigned -OSType Windows -AppSetting $AppSettings -RuntimeVersion 7.4
Write-Host " - Done" -ForegroundColor Green

Write-Host "Creating Client Function App" -NoNewline -ForegroundColor Cyan
$AzureFunctionClient = New-AzFunctionApp -ResourceGroupName $ResourceGroup.ResourceGroupName -Name $Objects.ClientFunctionApp -Location $Objects.Location -StorageAccount $StorageAccount.StorageAccountName -Runtime PowerShell -FunctionsVersion 4 -IdentityType SystemAssigned -OSType Windows -AppSetting $AppSettings -RuntimeVersion 7.4
Write-Host " - Done" -ForegroundColor Green

Write-Host "Assigning Roles" -NoNewline -ForegroundColor Cyan
New-AzRoleAssignment -RoleDefinitionName "Key Vault Secrets Officer" -ObjectId $AzureFunctionAdmin.IdentityPrincipalId -Scope $KeyVault.ResourceId | Out-Null
New-AzRoleAssignment -RoleDefinitionName "Key Vault Secrets User" -ObjectId $AzureFunctionClient.IdentityPrincipalId -Scope $KeyVault.ResourceId | Out-Null
New-AzRoleAssignment -RoleDefinitionName "Storage Table Data Reader" -ObjectId $AzureFunctionAdmin.IdentityPrincipalId -Scope $StorageAccount.id | Out-Null
New-AzRoleAssignment -RoleDefinitionName "Storage Table Data Reader" -ObjectId $AzureFunctionClient.IdentityPrincipalId -Scope $StorageAccount.id | Out-Null

Write-Host " - Done" -ForegroundColor Green

$AdminPermissions = @(
    "Device.Read.All", 
    "Group.Read.All", 
    "User.ReadWrite.All"
    "DeviceManagementManagedDevices.ReadWrite.All",
    "DeviceManagementManagedDevices.Read.All", 
    "DeviceManagementServiceConfig.ReadWrite.All",
    "Directory.ReadWrite.All",
    "DeviceManagementApps.ReadWrite.All",
    "DeviceManagementConfiguration.ReadWrite.All",
    "User.ManageIdentities.All"
)

forEach ($Permission in $AdminPermissions) {
    try {
        Set-ManagedIDPermissions -managedId $AzureFunctionAdmin.IdentityPrincipalId -graphScope $Permission -ErrorAction SilentlyContinue
    }
    catch {
        Write-Host $_ -ForegroundColor Red
        Continue
    }
}

$ClientPermissions = @(
    "Device.Read.All", 
    "DeviceManagementManagedDevices.Read.All", 
    "DeviceManagementServiceConfig.Read.All",
    "Directory.Read.All",
    "Group.Read.All", 
    "User.Read.All",
    "DeviceManagementApps.Read.All",
    "DeviceManagementConfiguration.Read.All"
)

forEach ($Permission in $AdminPermissions) {
    try {
        Set-ManagedIDPermissions -managedId $AzureFunctionClient.IdentityPrincipalId -graphScope $Permission -ErrorAction SilentlyContinue
    }
    catch {
        Write-Host $_ -ForegroundColor Red
        Continue
    }
}

#Create Sample table entry
$TableRow = @{
    UserName    = "SampleUser@$DomainName"
    CommandLine = "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
    Arguments   = "https://asquaredozen.com"
}
Write-Host "Creating Sample Table Row" -NoNewline -ForegroundColor Cyan
$NewRow = Add-AzTableRow -Table $StorageTable.CloudTable -PartitionKey 1 -RowKey (new-guid).guid -Property $TableRow
Write-Host " - Done" -ForegroundColor Green

#Assign User Administrator Role
Write-Host "Granting User Administrator Role to Admin function" -NoNewline -ForegroundColor Cyan
$token = (Get-AzAccessToken -ResourceUrl "https://graph.microsoft.com/").Token

$UserAdminParams = @{
    Header = @{Authorization = "Bearer $token" }
    Uri = "https://graph.microsoft.com/beta/roleManagement/directory/roleAssignments"
    Body = @{
        "@odata.type"    = "#microsoft.graph.unifiedRoleAssignment"
        roleDefinitionId = "fe930be7-5e62-47db-91af-98c3a49a38b1"
        directoryScopeId = "/"
        principalId      = $AzureFunctionAdmin.IdentityPrincipalId
        
    } | ConvertTo-Json
    Method = "Post"
    ErrorAction = "Continue"
    ContentType = "Application/Json"
}

$Response = Invoke-RestMethod @UserAdminParams
Write-Host " - Done" -ForegroundColor Green


#end region