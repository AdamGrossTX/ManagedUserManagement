<#
.SYNOPSIS

.DESCRIPTION

.PARAMETER FunctionAppURI
    The URI of the Admin function app.

.PARAMETER DeviceSerialNumbers
    An array of device serial numbers.

.EXAMPLE

.NOTES
    Author: Adam Gross - @AdamGrossTX
    GitHub: https://github.com/AdamGrossTX/ManagedUserManagement

    Comments generated by GitHub CoPilot

#>

param(
    [string]$FunctionAppURI,
    [string[]]$DeviceSerialNumbers
)

function Get-DSREGCMDStatus {
    [cmdletbinding()]
    param(
        [parameter(HelpMessage = "Use to add /DEBUG to DSREGCMD")]
        [switch]$bDebug #Can't use Debug since it's a reserved word
    )
    try {
        Write-Host "Calling DSREGCMDSTATUS"

        $cmdArgs = if ($bDebug) { "/STATUS", "/DEBUG" } else { "/STATUS" }
        $DSREGCMDStatus = & DSREGCMD $cmdArgs

        $DSREGCMDEntries = [PSCustomObject]@{}

        if ($DSREGCMDStatus) {
            for ($i = 0; $i -le $DSREGCMDStatus.Count ; $i++) {
                if ($DSREGCMDStatus[$i] -like "| *") {
                    $GroupName = $DSREGCMDStatus[$i].Replace("|", "").Trim().Replace(" ", "")
                    $Member = @{
                        MemberType = "NoteProperty"
                        Name       = $GroupName
                        Value      = $null
                    }
                    $DSREGCMDEntries | Add-Member @Member
                    $i++ #Increment to skip next line with +----
                    $GroupEntries = [PSCustomObject]@{}

                    do {
                        $i++
                        if ($DSREGCMDStatus[$i] -like "*::*") {
                            $DiagnosticEntries = $DSREGCMDStatus[$i] -split "(^DsrCmd.+(?=DsrCmd)|DsrCmd.+(?=\n))" | Where-Object { $_ -ne '' }
                            foreach ($Entry in $DiagnosticEntries) {
                                $EntryParts = $Entry -split "(^.+?::.+?: )" | Where-Object { $_ -ne '' }
                                $EntryParts[0] = $EntryParts[0].Replace("::", "").Replace(": ", "")
                                if ($EntryParts) {
                                    $Member = @{
                                        MemberType = "NoteProperty"
                                        Name       = $EntryParts[0].Trim().Replace(" ", "")
                                        Value      = $EntryParts[1].Trim()
                                    }
                                    $GroupEntries | Add-Member @Member
                                    $Member = $null
                                }
                            }
                        }
                        elseif ($DSREGCMDStatus[$i] -like "* : *") {
                            $EntryParts = $DSREGCMDStatus[$i] -split ':'
                            if ($EntryParts) {
                                $Member = @{
                                    MemberType = "NoteProperty"
                                    Name       = $EntryParts[0].Trim().Replace(" ", "")
                                    Value      = if ($EntryParts.Count -gt 2) {
                                                    ( $EntryParts[1..(($EntryParts.Count) - 1)] -join ":").Split("--").Replace("[ ", "").Replace(" ]", "").Trim()
                                    }
                                    else {
                                        $EntryParts[1].Trim()
                                    }
                                }
                                $GroupEntries | Add-Member @Member
                                $Member = $null
                            }
                        }
                    
                    } until($DSREGCMDStatus[$i] -like "+-*" -or $i -eq $DSREGCMDStatus.Count)
    
                    $DSREGCMDEntries.$GroupName = $GroupEntries
                }
            }
            return $DSREGCMDEntries
        }
        else {
            return "No Status Found"
        }
    }
    catch {
        throw $_
    }
}

function Get-EntraDeviceCert {
    [CmdletBinding()]
    param (
    )
    try {
        Write-Host "Getting Azure AD Device Certificate"
        #Get best cert from DSRegCmd
        $dsregcmdStatus = Get-DSREGCMDStatus
        $Thumbprint = $dsregcmdstatus.DeviceDetails.Thumbprint
    
        #Get the local cert that matches the DSRegCMD Cert
        $Certs = Get-ChildItem -Path Cert:\LocalMachine\My 
        $Cert = $Certs | Where-Object { $_.Thumbprint -eq $dsregcmdstatus.DeviceDetails.Thumbprint }

        if ($Cert.Thumbprint -eq $Thumbprint) {
            return $Cert
        }
        else {
            Write-Output "No valid Entra Device Cert Found."
        }
    }
    catch {
        throw $_
    }
}

function Get-IntuneDeviceCert {
    [CmdletBinding()]
    [OutputType([X509Certificate])]
    param (
    )
    try {
        $CertIssuer = "CN=Microsoft Intune MDM Device CA"
        $ProviderRegistryPath = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Enrollments"
        $ProviderPropertyName = "ProviderID"
        $ProviderPropertyValue = "MS DM Server"
        $ProviderGUID = (Get-ChildItem -Path Registry::$ProviderRegistryPath -Recurse | ForEach-Object { if ((Get-ItemProperty -Name $ProviderPropertyName -Path $_.PSPath -ErrorAction SilentlyContinue | Get-ItemPropertyValue -Name $ProviderPropertyName -ErrorAction SilentlyContinue) -match $ProviderPropertyValue) { $_ } }).PSChildName
        $DMClientPath = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Enrollments\$($ProviderGUID)\DMClient\MS DM Server"
        $IntuneDeviceId = (Get-ItemPropertyValue -Path Registry::$DMClientPath -Name "EntDMID")

        $Cert = (Get-ChildItem cert:\LocalMachine\my | where-object { $_.Issuer -in $CertIssuer -and $_.Subject -like "*$IntuneDeviceId*" })
        if ($cert) {
            return $Cert
        }
    
}
    catch {
        throw $_
    }
}

try {
   
    $EntraDeviceCert = Get-EntraDeviceCert
    $IntuneDeviceCert = Get-IntuneDeviceCert

    if ($IntuneDeviceCert -and $EntraDeviceCert) {
        $AdminParams = @{
            URI             = "$($FunctionAppURI)/api/NewManagedUser?DeviceSerialNumber=$($SerialNumber)"
            Headers         = @{
                EntraDeviceCert  = [System.Convert]::ToBase64String($EntraDeviceCert.GetRawCertData())
                IntuneDeviceCert = [System.Convert]::ToBase64String($IntuneDeviceCert.GetRawCertData())
            }
            UseBasicParsing = $true
        }
        $UserToDeviceMap = foreach ($SerialNumber in $DeviceSerialNumbers) {
            try {
                Write-Host "Creating new user for device with serial number: $($SerialNumber)" -NoNewline -ForegroundColor Cyan
                $Response = Invoke-RestMethod -Uri @AdminParams
                [PSCustomObject]@{
                    UserPrincipalName = $Response.Name
                    SerialNumber      = $SerialNumber
                }
                Write-Host " - Done" -ForegroundColor Green
            }
            catch {
                $_
            }
        }

        $UserToDeviceMap
    }

}
catch {
    throw $_
}
